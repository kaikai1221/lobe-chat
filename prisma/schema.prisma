// prisma/schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// generator dbml {
//   provider = "prisma-dbml-generator"
//   output   = "./"
// }

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[] @relation("UserRole")
}

model User {
  userId       Int     @id @default(autoincrement())
  email        String? @unique // 邮箱
  name         String? @unique // 用户名
  passwordHash String? @db.Text // 密码
  phone        String? @unique // 手机 +86

  wechat WechatInfo? @relation("UserWechat")

  roleId Int
  role   Role @relation("UserRole", fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  orders          Order[]            @relation("UserOrder") // 用户的订单
  subscriptions   Subscription[]     @relation("UserSubscription") // 用户的订阅
  redeems         Redeem[]           @relation("UserRedeem") // 用户的卡密
  chatHistory     ChatHistory[]      @relation("UserChatHistory") // 用户的聊天记录（只存图片）
  userLimits      UserLimits[]       @relation("UserLimits") // 用户的用量
  resetChances    Int                @default(0)
  integral        Int                @default(1000)
  createdAt       DateTime           @default(now()) @db.Timestamptz(6) // 注册时间
  updatedAt       DateTime           @default(now()) @updatedAt
  isBlocked       Boolean            @default(false) // 是否被封禁
  tokens          String[]           @default([])
  invitationCodes InvitationCode[]   @relation("UserInvitationCodes") // 当前用户的邀请码，一般用户只有一个
  invitation      InvitationRecord[] @relation("InvitationOnInvitee") // 当前用户邀请的对应记录
  inviter         InvitationRecord[] @relation("InvitationOnInviter") // 当前用户邀请的对应记录
  integralUsed    IntegralUsed[]     @relation("UserIntegralUsed") // 当前用户邀请的对应记录
  ip              String?            @default("")
}

model IntegralUsed {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation("UserIntegralUsed", fields: [userId], references: [userId])
  modelName String
  model     Model    @relation("ModelIntegralUsed", fields: [modelName], references: [modelName])
  desc      String
  useValue  Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model WechatInfo {
  openId  String  @id
  unionId String? @unique

  userId Int  @unique
  user   User @relation("UserWechat", fields: [userId], references: [userId])
}

model WechatTicket {
  id String @id @default(uuid())

  code      Int // 验证 Code
  ticket    String   @unique // 微信返回的 Ticket
  openId    String? // 若该 Ticket 被扫码则填入用户 openId
  expiredAt DateTime @db.Timestamptz(6)
}

model InvitationCode {
  code String @id // id 即 code 应为 6 位大小写数字混合

  ownerId Int?
  owner   User? @relation("UserInvitationCodes", fields: [ownerId], references: [userId]) // 关联至用户的邀请码

  invitations InvitationRecord[] @relation("InvitationOnCode") // 产生的邀请

  @@unique([code, ownerId]) // 组合后唯一
}

// 邀请记录
model InvitationRecord {
  id String @id @default(uuid())

  inviterId Int // 邀请者
  inviteeId Int  @unique // 被邀请者
  invitee   User @relation("InvitationOnInvitee", fields: [inviterId], references: [userId])
  inviter   User @relation("InvitationOnInviter", fields: [inviteeId], references: [userId])

  code    String
  codeRaw InvitationCode @relation("InvitationOnCode", fields: [code, inviterId], references: [code, ownerId])
}

model Model {
  modelId     Int            @id @default(autoincrement())
  modelName   String         @unique
  available   Boolean        @default(true)
  isShow      Boolean        @default(true)
  unitPrice   Int            @default(10) // 1000token多少积分 
  inputPrice  Int            @default(10) // 1000token多少积分 
  outPrice    Int            @default(10) // 1000token多少积分 
  limits      Limits[]       @relation("LimitsWithModel")
  chatHistory ChatHistory[]  @relation("ChatHistoryWithModel")
  userLimits  UserLimits[]   @relation("UserLimitsWithModel")
  useList     IntegralUsed[] @relation("ModelIntegralUsed")

  @@unique([modelId, modelName])
}

model Prices {
  id Int @id @default(autoincrement())

  name     String // 价格名称，如月付、季付、年付
  amount   Int // 单位为分
  duration Int // 单位为秒

  isCurrent Boolean

  planId Int
  plan   Plan @relation("PricesWithPlan", fields: [planId], references: [planId])

  Order Order[] @relation("OrderPrices")
}

model Limits {
  id Int @id @default(autoincrement())

  times    Int // 限制次数
  duration Int // 单位为秒，限制持续时间 若为 0 则不限制 如每三小时小时

  planId Int
  plan   Plan @relation("LimitsWithPlan", fields: [planId], references: [planId])

  modelId   Int
  modelName String
  model     Model  @relation("LimitsWithModel", fields: [modelId, modelName], references: [modelId, modelName])
}

model Plan {
  planId   Int      @id @default(autoincrement())
  name     String   @unique
  features String[]
  level    Int      @default(0)
  prices   Prices[] @relation("PricesWithPlan") // 该计划不同时间（月、季或者年...）的价格
  limits   Limits[] @relation("LimitsWithPlan") // 该计划每个模型的价格

  redeems       Redeem[]       @relation("RedeemPlan")
  subscriptions Subscription[] @relation("SubscriptionPlan")
}

enum OrderStatus {
  Pending
  Paid
  Failed
  Refunded
}

model Order {
  orderId String      @id @unique
  count   Int         @default(1)
  amount  Int // 订单金额，单位为分
  status  OrderStatus

  userId Int // 订单的用户
  user   User @relation("UserOrder", fields: [userId], references: [userId])

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt

  priceId Int
  price   Prices @relation("OrderPrices", fields: [priceId], references: [id])

  subscription Subscription? @relation("OrderSubscription")
}

model Redeem {
  redeemCode  String    @id
  isActivated Boolean   @default(false) // 是否被激活
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  activatedAt DateTime?

  activatedBy   Int?
  activatedUser User? @relation("UserRedeem", fields: [activatedBy], references: [userId])

  planId Int // 将订阅与计划关联
  plan   Plan @relation("RedeemPlan", fields: [planId], references: [planId])

  subscription Subscription? @relation("RedeemSubscription")
}

model Subscription {
  subscriptionId String @id @default(uuid())

  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  startAt    DateTime @default(now()) @db.Timestamptz(6)
  expiredAt  DateTime @db.Timestamptz(6)
  modelTimes Json     @default("{}") //模型使用次数 
  // 一个订阅对应一个卡密或者订单
  redeemCode String?  @unique // 对应的卡密
  redeem     Redeem?  @relation("RedeemSubscription", fields: [redeemCode], references: [redeemCode])
  orderId    String?  @unique // 对应的订单
  order      Order?   @relation("OrderSubscription", fields: [orderId], references: [orderId]) // 对应的计划

  planId Int // 将订阅与计划关联
  plan   Plan @relation("SubscriptionPlan", fields: [planId], references: [planId])

  userId     Int
  user       User         @relation("UserSubscription", fields: [userId], references: [userId])
  UserLimits UserLimits[] @relation("UserLimitsSubscription")
}

enum RegisterType {
  Phone
  Email
}

enum ChatType {
  midjourney
}

model RegisterCode {
  id        String       @id @default(uuid())
  type      RegisterType // 注册类型
  register  String       @unique // 注册人，邮箱地址或手机号地址
  code      Int          @unique // 注册效验码
  expiredAt DateTime     @default(now()) @db.Timestamptz(6) // 过期时间
}

model ChatHistory {
  id        String   @id @default(uuid())
  modelName String?
  model     Model?   @relation("ChatHistoryWithModel", fields: [modelName], references: [modelName])
  content   String?
  prompt    String? //提示词
  mjTaskId  String?  @unique
  mjParams  String?
  userId    Int?
  user      User?    @relation("UserChatHistory", fields: [userId], references: [userId])
  createdAt DateTime @default(now()) @db.Timestamptz(6) //信息时间
}

model UserLimits {
  id             Int          @id @default(autoincrement())
  modelName      String
  model          Model        @relation("UserLimitsWithModel", fields: [modelName], references: [modelName])
  times          Int          @default(0)
  subscriptionId String
  subscription   Subscription @relation("UserLimitsSubscription", fields: [subscriptionId], references: [subscriptionId])
  userId         Int
  user           User         @relation("UserLimits", fields: [userId], references: [userId])
  createdAt      DateTime     @default(now()) @db.Timestamptz(6) //
  startAt        DateTime     @default(now()) @db.Timestamptz(6) //
  expiredAt      DateTime     @default(now()) @db.Timestamptz(6) //
  updatedAt      DateTime     @default(now()) @db.Timestamptz(6) //
}

model OpenAIKey {
  key String @id
}

model RateLimit {
  key   String @id
  value Int[]
}

model Setting {
  key   String @id
  value String
}
